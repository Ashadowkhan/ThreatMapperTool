{"version":3,"file":"Pagination-bef9afc0.js","sources":["../../src/components/hooks/usePagination.tsx","../../src/components/pagination/Pagination.tsx"],"sourcesContent":["import { useMemo } from 'react';\n\nexport type UsePaginationOptions = {\n  currentPage: number;\n  totalNumberOfPages: number;\n  siblingCount: number;\n  likelyToHaveMorePages: boolean;\n};\ntype Dots = 'DOTS';\n\nconst getPaginationRange = ({\n  totalNumberOfPages,\n  siblingCount,\n  currentPage,\n  likelyToHaveMorePages,\n}: UsePaginationOptions): (number | 'DOTS')[] => {\n  const dots: Dots = 'DOTS';\n\n  if (currentPage > totalNumberOfPages) {\n    totalNumberOfPages = currentPage;\n  }\n\n  if (totalNumberOfPages <= siblingCount * 2 + 5) {\n    if (likelyToHaveMorePages) {\n      return [...range(1, totalNumberOfPages + 1), dots];\n    }\n    return range(1, totalNumberOfPages + 1);\n  }\n\n  const middleArray = [currentPage];\n  let totalSiblingsToAdd =\n    totalNumberOfPages <= siblingCount * 2 ? totalNumberOfPages - 1 : siblingCount * 2;\n\n  while (totalSiblingsToAdd > 0) {\n    if (middleArray[0] >= 2) {\n      middleArray.unshift(middleArray[0] - 1);\n      totalSiblingsToAdd--;\n    }\n\n    if (totalSiblingsToAdd === 0) break;\n\n    if (middleArray[middleArray.length - 1] <= totalNumberOfPages - 1) {\n      middleArray.push(middleArray[middleArray.length - 1] + 1);\n      totalSiblingsToAdd--;\n    }\n  }\n\n  const result: (number | 'DOTS')[] = [];\n\n  if (middleArray[0] !== 1) {\n    result.push(1);\n  }\n  if (middleArray[0] > 2) {\n    result.push(dots);\n  }\n\n  result.push(...middleArray);\n\n  if (middleArray[middleArray.length - 1] < totalNumberOfPages - 1) {\n    result.push(dots);\n  }\n\n  if (middleArray[middleArray.length - 1] !== totalNumberOfPages) {\n    result.push(totalNumberOfPages);\n  }\n\n  if (likelyToHaveMorePages) {\n    result.push(dots);\n  }\n\n  return result;\n};\n\n// a range function which takes a start and end as parameters and returns an array of numbers between them\n// if start is greater or equal to end, it returns an empty array\n// if start is less than end, it returns an array of numbers between them\n// it includes start and excludes end\nconst range = (start: number, end: number): number[] => {\n  if (start >= end) {\n    return [];\n  }\n\n  return new Array(end - start).fill(0).map((_, index) => start + index);\n};\n\nexport const usePagination = ({\n  currentPage,\n  totalNumberOfPages,\n  siblingCount = 2,\n  likelyToHaveMorePages: likelyToHaveMorePages,\n}: UsePaginationOptions) => {\n  return useMemo(() => {\n    return getPaginationRange({\n      currentPage,\n      totalNumberOfPages,\n      siblingCount,\n      likelyToHaveMorePages,\n    });\n  }, [totalNumberOfPages, siblingCount, currentPage, likelyToHaveMorePages]);\n};\n","import cx from 'classnames';\nimport { useMemo } from 'react';\nimport { HiDotsHorizontal } from 'react-icons/hi';\n\nimport { usePagination, UsePaginationOptions } from '@/components/hooks/usePagination';\nimport { dfTwMerge } from '@/utils/twmerge';\n\ntype PageButtonProps = {\n  label: string | number | JSX.Element;\n  className: string;\n  disabled: boolean;\n  onPageChange?: () => void;\n};\n\ntype OwnProps = {\n  onPageChange: (page: number) => void;\n  approximatePagination?: boolean;\n  totalRows: number;\n  pageSize?: number;\n};\ntype Props = Partial<Pick<UsePaginationOptions, 'currentPage' | 'siblingCount'>> &\n  OwnProps;\n\nconst PageButton = ({\n  label,\n  onPageChange,\n  disabled,\n  className,\n  ...rest\n}: PageButtonProps) => {\n  return (\n    <button\n      className={dfTwMerge(\n        // we donot want border to be overlap so we use border right here\n        cx(\n          'flex justify-center items-center text-p7 dark:bg-bg-card',\n          'px-3 py-[5px] border-r border-y border-gray-300 dark:border-bg-grid-border',\n          'dark:text-text-text-and-icon overflow-hidden',\n          'hover:dark:text-text-input-value',\n        ),\n        className,\n      )}\n      onClick={() => {\n        onPageChange?.();\n      }}\n      type=\"button\"\n      disabled={disabled}\n      {...rest}\n    >\n      {label}\n    </button>\n  );\n};\n\nexport const Pagination = ({\n  currentPage = 1,\n  pageSize = 10,\n  onPageChange,\n  totalRows,\n  siblingCount = 2,\n  approximatePagination = false,\n}: Props) => {\n  let totalNumberOfPages = Math.ceil(totalRows / pageSize);\n  let likelyToHaveMorePages = false;\n\n  // if approximate pagination we only check for 10 pages\n  if (approximatePagination && totalNumberOfPages - currentPage + 1 >= 10) {\n    totalNumberOfPages = totalNumberOfPages - 1;\n    likelyToHaveMorePages = true;\n  }\n\n  const pagination = usePagination({\n    currentPage,\n    totalNumberOfPages,\n    siblingCount,\n    likelyToHaveMorePages,\n  });\n\n  const currentShowing = useMemo(() => {\n    /**\n     * For page 1, start count will always be 1\n     * end count can either be total available rows or calculated value\n     * \n     * At page between first and last, start count will be cuurentPage * pageSize - pageSize + 1 because\n     * eg: currentPage is 2, total page is 3, pageSize is 5\n     * For first page start count is 1 and end count is 5. [1-5]\n     * For second page start count must be 6 (2 * 5 - 5 + 1 = 10 - 5 + 1 = 6) [6-10]\n\n     * At last page total rows can be lesser than total available rows, so end count is max set to total rows\n     * At last page start count cannot go beyond total rows, so set to last page - 1 * pageSize\n     * \n     * At page 1 total rows could be less than total available rows\n     */\n    let startCount = 1;\n    let endCount = 1;\n\n    startCount = currentPage * pageSize - pageSize + 1;\n    endCount = currentPage * pageSize;\n\n    if (endCount >= totalRows) {\n      startCount = (currentPage - 1) * pageSize + 1;\n      endCount = totalRows;\n    }\n\n    if (currentPage == 1) {\n      startCount = 1;\n      endCount = pageSize > totalRows ? totalRows : pageSize;\n    }\n    return [startCount, endCount];\n  }, [currentPage, totalRows]);\n\n  const onPrevious = () => {\n    if (currentPage === 1) {\n      return;\n    }\n    onPageChange(currentPage - 1);\n  };\n\n  const onNext = () => {\n    if (currentPage === totalNumberOfPages) {\n      return;\n    }\n    onPageChange(currentPage + 1);\n  };\n\n  return (\n    <div className=\"flex justify-end items-center gap-4\">\n      <div className={`text-gray-500 dark:text-text-text-and-icon text-p4`}>\n        Showing{' '}\n        <span className=\"text-black dark:text-text-input-value\">\n          {currentShowing[0]}-{currentShowing[1]}\n        </span>\n        {!approximatePagination ? (\n          <>\n            <span> of</span>\n            <span className=\"text-black dark:text-text-input-value\"> {totalRows}</span>\n          </>\n        ) : null}\n      </div>\n      <div className={cx(`flex flex-row flex-nowrap`)}>\n        <PageButton\n          data-testid=\"pagination-prev\"\n          label={\n            <div className=\"h-4 w-4 rotate-180\">\n              <CaretIcon />\n            </div>\n          }\n          key={'Previous'}\n          onPageChange={onPrevious}\n          disabled={totalNumberOfPages === 0}\n          className={cx('rounded-l border-l px-1.5')}\n        />\n\n        {pagination?.map((page, index) => {\n          if (page === 'DOTS') {\n            return (\n              <PageButton\n                label={<HiDotsHorizontal />}\n                key={page + index}\n                disabled={true}\n                className={'px-2 py-1.5 focus:border-gray-300 focus:dark:border-gray-700'}\n                data-testid=\"pagination-button-dots\"\n              />\n            );\n          }\n          return (\n            <PageButton\n              label={page}\n              key={page}\n              onPageChange={() => {\n                onPageChange(page);\n              }}\n              disabled={false}\n              className={cx({\n                'bg-blue-100 text-blue-600 dark:bg-bg-active-selection dark:text-text-input-value':\n                  page === currentPage,\n              })}\n            />\n          );\n        })}\n\n        <PageButton\n          label={\n            <div className=\"h-4 w-4\">\n              <CaretIcon />\n            </div>\n          }\n          key={'Next'}\n          data-testid=\"pagination-next\"\n          onPageChange={onNext}\n          disabled={totalNumberOfPages === 0}\n          className={cx('rounded-r px-1.5')}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst CaretIcon = () => {\n  return (\n    <svg\n      width=\"100%\"\n      height=\"100%\"\n      viewBox=\"0 0 16 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M5.90047 13.6175L11.4392 8.26468L5.90047 2.9118C5.58611 2.60898 5.08578 2.61835 4.78297 2.93271C4.48015 3.24708 4.48951 3.7474 4.80387 4.05022L9.16703 8.26468L4.80387 12.4838C4.48951 12.7866 4.48015 13.2869 4.78297 13.6013C5.08578 13.9157 5.58611 13.925 5.90047 13.6222V13.6175Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nPagination.displayName = 'Pagination';\nexport default Pagination;\n"],"names":["getPaginationRange","totalNumberOfPages","siblingCount","currentPage","likelyToHaveMorePages","dots","range","middleArray","totalSiblingsToAdd","result","start","end","_","index","usePagination","useMemo","PageButton","label","onPageChange","disabled","className","rest","React","dfTwMerge","cx","Pagination","pageSize","totalRows","approximatePagination","pagination","currentShowing","startCount","endCount","onPrevious","onNext","CaretIcon","page","HiDotsHorizontal"],"mappings":"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"}