/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  IngestersRegisterKubernetesScannerRequest,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    IngestersRegisterKubernetesScannerRequestFromJSON,
    IngestersRegisterKubernetesScannerRequestToJSON,
} from '../models';

export interface RegisterKubernetesScannerRequest {
    ingestersRegisterKubernetesScannerRequest?: Array<IngestersRegisterKubernetesScannerRequest> | null;
}

/**
 * KubernetesScannerApi - interface
 * 
 * @export
 * @interface KubernetesScannerApiInterface
 */
export interface KubernetesScannerApiInterface {
    /**
     * Register Kubernetes Scanner
     * @summary Register Kubernetes Scanner
     * @param {Array<IngestersRegisterKubernetesScannerRequest>} [ingestersRegisterKubernetesScannerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KubernetesScannerApiInterface
     */
    registerKubernetesScannerRaw(requestParameters: RegisterKubernetesScannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Register Kubernetes Scanner
     * Register Kubernetes Scanner
     */
    registerKubernetesScanner(requestParameters: RegisterKubernetesScannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class KubernetesScannerApi extends runtime.BaseAPI implements KubernetesScannerApiInterface {

    /**
     * Register Kubernetes Scanner
     * Register Kubernetes Scanner
     */
    async registerKubernetesScannerRaw(requestParameters: RegisterKubernetesScannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ingest/kubernetes-scanner`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ingestersRegisterKubernetesScannerRequest?.map(IngestersRegisterKubernetesScannerRequestToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register Kubernetes Scanner
     * Register Kubernetes Scanner
     */
    async registerKubernetesScanner(requestParameters: RegisterKubernetesScannerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerKubernetesScannerRaw(requestParameters, initOverrides);
    }

}
