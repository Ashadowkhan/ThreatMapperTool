/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  DiagnosisDiagnosticNotification,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    DiagnosisDiagnosticNotificationFromJSON,
    DiagnosisDiagnosticNotificationToJSON,
} from '../models';

/**
 * DiagnosisApi - interface
 * 
 * @export
 * @interface DiagnosisApiInterface
 */
export interface DiagnosisApiInterface {
    /**
     * Get Diagnostic Notification
     * @summary Get Diagnostic Notification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosisApiInterface
     */
    diagnosticNotificationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DiagnosisDiagnosticNotification>>>;

    /**
     * Get Diagnostic Notification
     * Get Diagnostic Notification
     */
    diagnosticNotification(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DiagnosisDiagnosticNotification>>;

    /**
     * Generate Agent Diagnostic Logs
     * @summary Generate Agent Diagnostic Logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosisApiInterface
     */
    generateAgentDiagnosticLogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Generate Agent Diagnostic Logs
     * Generate Agent Diagnostic Logs
     */
    generateAgentDiagnosticLogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Generate Console Diagnostic Logs
     * @summary Generate Console Diagnostic Logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosisApiInterface
     */
    generateConsoleDiagnosticLogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Generate Console Diagnostic Logs
     * Generate Console Diagnostic Logs
     */
    generateConsoleDiagnosticLogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get diagnostic logs download url links
     * @summary Get Diagnostic Logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosisApiInterface
     */
    getDiagnosticLogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get diagnostic logs download url links
     * Get Diagnostic Logs
     */
    getDiagnosticLogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class DiagnosisApi extends runtime.BaseAPI implements DiagnosisApiInterface {

    /**
     * Get Diagnostic Notification
     * Get Diagnostic Notification
     */
    async diagnosticNotificationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DiagnosisDiagnosticNotification>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/diagnosis/notification`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DiagnosisDiagnosticNotificationFromJSON));
    }

    /**
     * Get Diagnostic Notification
     * Get Diagnostic Notification
     */
    async diagnosticNotification(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DiagnosisDiagnosticNotification>> {
        const response = await this.diagnosticNotificationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Generate Agent Diagnostic Logs
     * Generate Agent Diagnostic Logs
     */
    async generateAgentDiagnosticLogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/diagnosis/agent-logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate Agent Diagnostic Logs
     * Generate Agent Diagnostic Logs
     */
    async generateAgentDiagnosticLogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.generateAgentDiagnosticLogsRaw(initOverrides);
    }

    /**
     * Generate Console Diagnostic Logs
     * Generate Console Diagnostic Logs
     */
    async generateConsoleDiagnosticLogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/diagnosis/console-logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate Console Diagnostic Logs
     * Generate Console Diagnostic Logs
     */
    async generateConsoleDiagnosticLogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.generateConsoleDiagnosticLogsRaw(initOverrides);
    }

    /**
     * Get diagnostic logs download url links
     * Get Diagnostic Logs
     */
    async getDiagnosticLogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/diagnosis/diagnostic-logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get diagnostic logs download url links
     * Get Diagnostic Logs
     */
    async getDiagnosticLogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getDiagnosticLogsRaw(initOverrides);
    }

}
