/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  ModelContainer,
  ModelContainerImage,
  ModelHost,
  ModelKubernetesCluster,
  ModelPod,
  ModelProcess,
  ReportersLookupFilter,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    ModelContainerFromJSON,
    ModelContainerToJSON,
    ModelContainerImageFromJSON,
    ModelContainerImageToJSON,
    ModelHostFromJSON,
    ModelHostToJSON,
    ModelKubernetesClusterFromJSON,
    ModelKubernetesClusterToJSON,
    ModelPodFromJSON,
    ModelPodToJSON,
    ModelProcessFromJSON,
    ModelProcessToJSON,
    ReportersLookupFilterFromJSON,
    ReportersLookupFilterToJSON,
} from '../models';

export interface GetContainerImagesRequest {
    reportersLookupFilter?: ReportersLookupFilter;
}

export interface GetContainersRequest {
    reportersLookupFilter?: ReportersLookupFilter;
}

export interface GetHostsRequest {
    reportersLookupFilter?: ReportersLookupFilter;
}

export interface GetKubernetesClustersRequest {
    reportersLookupFilter?: ReportersLookupFilter;
}

export interface GetKubernetesScannersRequest {
    reportersLookupFilter?: ReportersLookupFilter;
}

export interface GetPodsRequest {
    reportersLookupFilter?: ReportersLookupFilter;
}

export interface GetProcessesRequest {
    reportersLookupFilter?: ReportersLookupFilter;
}

/**
 * LookupApi - interface
 * 
 * @export
 * @interface LookupApiInterface
 */
export interface LookupApiInterface {
    /**
     * Retrieve all the data associated with images
     * @summary Retrieve Container Images data
     * @param {ReportersLookupFilter} [reportersLookupFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApiInterface
     */
    getContainerImagesRaw(requestParameters: GetContainerImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelContainerImage>>>;

    /**
     * Retrieve all the data associated with images
     * Retrieve Container Images data
     */
    getContainerImages(requestParameters: GetContainerImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelContainerImage>>;

    /**
     * Retrieve all the data associated with containers
     * @summary Retrieve Containers data
     * @param {ReportersLookupFilter} [reportersLookupFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApiInterface
     */
    getContainersRaw(requestParameters: GetContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelContainer>>>;

    /**
     * Retrieve all the data associated with containers
     * Retrieve Containers data
     */
    getContainers(requestParameters: GetContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelContainer>>;

    /**
     * Retrieve all the data associated with hosts
     * @summary Retrieve Hosts data
     * @param {ReportersLookupFilter} [reportersLookupFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApiInterface
     */
    getHostsRaw(requestParameters: GetHostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelHost>>>;

    /**
     * Retrieve all the data associated with hosts
     * Retrieve Hosts data
     */
    getHosts(requestParameters: GetHostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelHost>>;

    /**
     * Retrieve all the data associated with k8s clusters
     * @summary Retrieve K8s data
     * @param {ReportersLookupFilter} [reportersLookupFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApiInterface
     */
    getKubernetesClustersRaw(requestParameters: GetKubernetesClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelKubernetesCluster>>>;

    /**
     * Retrieve all the data associated with k8s clusters
     * Retrieve K8s data
     */
    getKubernetesClusters(requestParameters: GetKubernetesClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelKubernetesCluster>>;

    /**
     * Retrieve all the data associated with k8s scanners
     * @summary Retrieve K8s scanners data
     * @param {ReportersLookupFilter} [reportersLookupFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApiInterface
     */
    getKubernetesScannersRaw(requestParameters: GetKubernetesScannersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelKubernetesCluster>>>;

    /**
     * Retrieve all the data associated with k8s scanners
     * Retrieve K8s scanners data
     */
    getKubernetesScanners(requestParameters: GetKubernetesScannersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelKubernetesCluster>>;

    /**
     * Retrieve all the data associated with pods
     * @summary Retrieve Pods data
     * @param {ReportersLookupFilter} [reportersLookupFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApiInterface
     */
    getPodsRaw(requestParameters: GetPodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelPod>>>;

    /**
     * Retrieve all the data associated with pods
     * Retrieve Pods data
     */
    getPods(requestParameters: GetPodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelPod>>;

    /**
     * Retrieve all the data associated with processes
     * @summary Retrieve Processes data
     * @param {ReportersLookupFilter} [reportersLookupFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApiInterface
     */
    getProcessesRaw(requestParameters: GetProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelProcess>>>;

    /**
     * Retrieve all the data associated with processes
     * Retrieve Processes data
     */
    getProcesses(requestParameters: GetProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelProcess>>;

}

/**
 * 
 */
export class LookupApi extends runtime.BaseAPI implements LookupApiInterface {

    /**
     * Retrieve all the data associated with images
     * Retrieve Container Images data
     */
    async getContainerImagesRaw(requestParameters: GetContainerImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelContainerImage>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/lookup/containerimages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportersLookupFilterToJSON(requestParameters.reportersLookupFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelContainerImageFromJSON));
    }

    /**
     * Retrieve all the data associated with images
     * Retrieve Container Images data
     */
    async getContainerImages(requestParameters: GetContainerImagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelContainerImage>> {
        const response = await this.getContainerImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with containers
     * Retrieve Containers data
     */
    async getContainersRaw(requestParameters: GetContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelContainer>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/lookup/containers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportersLookupFilterToJSON(requestParameters.reportersLookupFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelContainerFromJSON));
    }

    /**
     * Retrieve all the data associated with containers
     * Retrieve Containers data
     */
    async getContainers(requestParameters: GetContainersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelContainer>> {
        const response = await this.getContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with hosts
     * Retrieve Hosts data
     */
    async getHostsRaw(requestParameters: GetHostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelHost>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/lookup/hosts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportersLookupFilterToJSON(requestParameters.reportersLookupFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelHostFromJSON));
    }

    /**
     * Retrieve all the data associated with hosts
     * Retrieve Hosts data
     */
    async getHosts(requestParameters: GetHostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelHost>> {
        const response = await this.getHostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with k8s clusters
     * Retrieve K8s data
     */
    async getKubernetesClustersRaw(requestParameters: GetKubernetesClustersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelKubernetesCluster>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/lookup/kubernetesclusters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportersLookupFilterToJSON(requestParameters.reportersLookupFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelKubernetesClusterFromJSON));
    }

    /**
     * Retrieve all the data associated with k8s clusters
     * Retrieve K8s data
     */
    async getKubernetesClusters(requestParameters: GetKubernetesClustersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelKubernetesCluster>> {
        const response = await this.getKubernetesClustersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with k8s scanners
     * Retrieve K8s scanners data
     */
    async getKubernetesScannersRaw(requestParameters: GetKubernetesScannersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelKubernetesCluster>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/lookup/kubernetes-scanners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportersLookupFilterToJSON(requestParameters.reportersLookupFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelKubernetesClusterFromJSON));
    }

    /**
     * Retrieve all the data associated with k8s scanners
     * Retrieve K8s scanners data
     */
    async getKubernetesScanners(requestParameters: GetKubernetesScannersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelKubernetesCluster>> {
        const response = await this.getKubernetesScannersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with pods
     * Retrieve Pods data
     */
    async getPodsRaw(requestParameters: GetPodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelPod>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/lookup/pods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportersLookupFilterToJSON(requestParameters.reportersLookupFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelPodFromJSON));
    }

    /**
     * Retrieve all the data associated with pods
     * Retrieve Pods data
     */
    async getPods(requestParameters: GetPodsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelPod>> {
        const response = await this.getPodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the data associated with processes
     * Retrieve Processes data
     */
    async getProcessesRaw(requestParameters: GetProcessesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelProcess>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/lookup/processes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportersLookupFilterToJSON(requestParameters.reportersLookupFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelProcessFromJSON));
    }

    /**
     * Retrieve all the data associated with processes
     * Retrieve Processes data
     */
    async getProcesses(requestParameters: GetProcessesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelProcess>> {
        const response = await this.getProcessesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
