/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  IngestersVulnerability,
  IngestersVulnerabilityScanStatus,
  ModelScanListReq,
  ModelScanListResp,
  ModelScanResultsReq,
  ModelScanStatusResp,
  ModelScanTriggerResp,
  ModelVulnerabilityScanResult,
  ModelVulnerabilityScanTriggerReq,
  UtilsSbomRequest,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    IngestersVulnerabilityFromJSON,
    IngestersVulnerabilityToJSON,
    IngestersVulnerabilityScanStatusFromJSON,
    IngestersVulnerabilityScanStatusToJSON,
    ModelScanListReqFromJSON,
    ModelScanListReqToJSON,
    ModelScanListRespFromJSON,
    ModelScanListRespToJSON,
    ModelScanResultsReqFromJSON,
    ModelScanResultsReqToJSON,
    ModelScanStatusRespFromJSON,
    ModelScanStatusRespToJSON,
    ModelScanTriggerRespFromJSON,
    ModelScanTriggerRespToJSON,
    ModelVulnerabilityScanResultFromJSON,
    ModelVulnerabilityScanResultToJSON,
    ModelVulnerabilityScanTriggerReqFromJSON,
    ModelVulnerabilityScanTriggerReqToJSON,
    UtilsSbomRequestFromJSON,
    UtilsSbomRequestToJSON,
} from '../models';

export interface IngestSbomRequest {
    utilsSbomRequest?: UtilsSbomRequest;
}

export interface IngestVulnerabilitiesRequest {
    ingestersVulnerability?: Array<IngestersVulnerability> | null;
}

export interface IngestVulnerabilitiesScanStatusRequest {
    ingestersVulnerabilityScanStatus?: Array<IngestersVulnerabilityScanStatus> | null;
}

export interface ListVulnerabilityScansRequest {
    modelScanListReq?: ModelScanListReq;
}

export interface ResultsVulnerabilityScansRequest {
    modelScanResultsReq?: ModelScanResultsReq;
}

export interface StartVulnerabilityScanRequest {
    modelVulnerabilityScanTriggerReq?: ModelVulnerabilityScanTriggerReq;
}

export interface StatusVulnerabilityScanRequest {
    scanIds: Array<string>;
    bulkScanId: string;
}

export interface StopVulnerabilityScanRequest {
    modelVulnerabilityScanTriggerReq?: ModelVulnerabilityScanTriggerReq;
}

/**
 * VulnerabilityApi - interface
 * 
 * @export
 * @interface VulnerabilityApiInterface
 */
export interface VulnerabilityApiInterface {
    /**
     * Ingest SBOM from Scan
     * @summary Ingest SBOM from Scan
     * @param {UtilsSbomRequest} [utilsSbomRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    ingestSbomRaw(requestParameters: IngestSbomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Ingest SBOM from Scan
     * Ingest SBOM from Scan
     */
    ingestSbom(requestParameters: IngestSbomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Ingest vulnerabilities found while scanning the agent host or containers
     * @summary Ingest Vulnerabilities
     * @param {Array<IngestersVulnerability>} [ingestersVulnerability] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    ingestVulnerabilitiesRaw(requestParameters: IngestVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Ingest vulnerabilities found while scanning the agent host or containers
     * Ingest Vulnerabilities
     */
    ingestVulnerabilities(requestParameters: IngestVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Ingest vulnerabilities scan status from agent
     * @summary Ingest Vulnerabilities Scan Status
     * @param {Array<IngestersVulnerabilityScanStatus>} [ingestersVulnerabilityScanStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    ingestVulnerabilitiesScanStatusRaw(requestParameters: IngestVulnerabilitiesScanStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Ingest vulnerabilities scan status from agent
     * Ingest Vulnerabilities Scan Status
     */
    ingestVulnerabilitiesScanStatus(requestParameters: IngestVulnerabilitiesScanStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get Vulnerability Scan list on agent or registry
     * @summary Get Vulnerability Scans List
     * @param {ModelScanListReq} [modelScanListReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    listVulnerabilityScansRaw(requestParameters: ListVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanListResp>>;

    /**
     * Get Vulnerability Scan list on agent or registry
     * Get Vulnerability Scans List
     */
    listVulnerabilityScans(requestParameters: ListVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanListResp>;

    /**
     * Get Vulnerability Scan results on agent or registry
     * @summary Get Vulnerability Scans Results
     * @param {ModelScanResultsReq} [modelScanResultsReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    resultsVulnerabilityScansRaw(requestParameters: ResultsVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelVulnerabilityScanResult>>;

    /**
     * Get Vulnerability Scan results on agent or registry
     * Get Vulnerability Scans Results
     */
    resultsVulnerabilityScans(requestParameters: ResultsVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelVulnerabilityScanResult>;

    /**
     * Start Vulnerability Scan on agent or registry
     * @summary Start Vulnerability Scan
     * @param {ModelVulnerabilityScanTriggerReq} [modelVulnerabilityScanTriggerReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    startVulnerabilityScanRaw(requestParameters: StartVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanTriggerResp>>;

    /**
     * Start Vulnerability Scan on agent or registry
     * Start Vulnerability Scan
     */
    startVulnerabilityScan(requestParameters: StartVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanTriggerResp>;

    /**
     * Get Vulnerability Scan Status on agent or registry
     * @summary Get Vulnerability Scan Status
     * @param {Array<string>} scanIds 
     * @param {string} bulkScanId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    statusVulnerabilityScanRaw(requestParameters: StatusVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanStatusResp>>;

    /**
     * Get Vulnerability Scan Status on agent or registry
     * Get Vulnerability Scan Status
     */
    statusVulnerabilityScan(requestParameters: StatusVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanStatusResp>;

    /**
     * Stop Vulnerability Scan on agent or registry
     * @summary Stop Vulnerability Scan
     * @param {ModelVulnerabilityScanTriggerReq} [modelVulnerabilityScanTriggerReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilityApiInterface
     */
    stopVulnerabilityScanRaw(requestParameters: StopVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Stop Vulnerability Scan on agent or registry
     * Stop Vulnerability Scan
     */
    stopVulnerabilityScan(requestParameters: StopVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class VulnerabilityApi extends runtime.BaseAPI implements VulnerabilityApiInterface {

    /**
     * Ingest SBOM from Scan
     * Ingest SBOM from Scan
     */
    async ingestSbomRaw(requestParameters: IngestSbomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ingest/sbom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UtilsSbomRequestToJSON(requestParameters.utilsSbomRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ingest SBOM from Scan
     * Ingest SBOM from Scan
     */
    async ingestSbom(requestParameters: IngestSbomRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ingestSbomRaw(requestParameters, initOverrides);
    }

    /**
     * Ingest vulnerabilities found while scanning the agent host or containers
     * Ingest Vulnerabilities
     */
    async ingestVulnerabilitiesRaw(requestParameters: IngestVulnerabilitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ingest/vulnerabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ingestersVulnerability?.map(IngestersVulnerabilityToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ingest vulnerabilities found while scanning the agent host or containers
     * Ingest Vulnerabilities
     */
    async ingestVulnerabilities(requestParameters: IngestVulnerabilitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ingestVulnerabilitiesRaw(requestParameters, initOverrides);
    }

    /**
     * Ingest vulnerabilities scan status from agent
     * Ingest Vulnerabilities Scan Status
     */
    async ingestVulnerabilitiesScanStatusRaw(requestParameters: IngestVulnerabilitiesScanStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ingest/vulnerabilities-scan-logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ingestersVulnerabilityScanStatus?.map(IngestersVulnerabilityScanStatusToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ingest vulnerabilities scan status from agent
     * Ingest Vulnerabilities Scan Status
     */
    async ingestVulnerabilitiesScanStatus(requestParameters: IngestVulnerabilitiesScanStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ingestVulnerabilitiesScanStatusRaw(requestParameters, initOverrides);
    }

    /**
     * Get Vulnerability Scan list on agent or registry
     * Get Vulnerability Scans List
     */
    async listVulnerabilityScansRaw(requestParameters: ListVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanListResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/list/vulnerability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanListReqToJSON(requestParameters.modelScanListReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelScanListRespFromJSON(jsonValue));
    }

    /**
     * Get Vulnerability Scan list on agent or registry
     * Get Vulnerability Scans List
     */
    async listVulnerabilityScans(requestParameters: ListVulnerabilityScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanListResp> {
        const response = await this.listVulnerabilityScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Vulnerability Scan results on agent or registry
     * Get Vulnerability Scans Results
     */
    async resultsVulnerabilityScansRaw(requestParameters: ResultsVulnerabilityScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelVulnerabilityScanResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/results/vulnerability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanResultsReqToJSON(requestParameters.modelScanResultsReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelVulnerabilityScanResultFromJSON(jsonValue));
    }

    /**
     * Get Vulnerability Scan results on agent or registry
     * Get Vulnerability Scans Results
     */
    async resultsVulnerabilityScans(requestParameters: ResultsVulnerabilityScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelVulnerabilityScanResult> {
        const response = await this.resultsVulnerabilityScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start Vulnerability Scan on agent or registry
     * Start Vulnerability Scan
     */
    async startVulnerabilityScanRaw(requestParameters: StartVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanTriggerResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/start/vulnerability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelVulnerabilityScanTriggerReqToJSON(requestParameters.modelVulnerabilityScanTriggerReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelScanTriggerRespFromJSON(jsonValue));
    }

    /**
     * Start Vulnerability Scan on agent or registry
     * Start Vulnerability Scan
     */
    async startVulnerabilityScan(requestParameters: StartVulnerabilityScanRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanTriggerResp> {
        const response = await this.startVulnerabilityScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Vulnerability Scan Status on agent or registry
     * Get Vulnerability Scan Status
     */
    async statusVulnerabilityScanRaw(requestParameters: StatusVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanStatusResp>> {
        if (requestParameters.scanIds === null || requestParameters.scanIds === undefined) {
            throw new runtime.RequiredError('scanIds','Required parameter requestParameters.scanIds was null or undefined when calling statusVulnerabilityScan.');
        }

        if (requestParameters.bulkScanId === null || requestParameters.bulkScanId === undefined) {
            throw new runtime.RequiredError('bulkScanId','Required parameter requestParameters.bulkScanId was null or undefined when calling statusVulnerabilityScan.');
        }

        const queryParameters: any = {};

        if (requestParameters.scanIds) {
            queryParameters['scan_ids'] = requestParameters.scanIds;
        }

        if (requestParameters.bulkScanId !== undefined) {
            queryParameters['bulk_scan_id'] = requestParameters.bulkScanId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/status/vulnerability`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelScanStatusRespFromJSON(jsonValue));
    }

    /**
     * Get Vulnerability Scan Status on agent or registry
     * Get Vulnerability Scan Status
     */
    async statusVulnerabilityScan(requestParameters: StatusVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanStatusResp> {
        const response = await this.statusVulnerabilityScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop Vulnerability Scan on agent or registry
     * Stop Vulnerability Scan
     */
    async stopVulnerabilityScanRaw(requestParameters: StopVulnerabilityScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/stop/vulnerability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelVulnerabilityScanTriggerReqToJSON(requestParameters.modelVulnerabilityScanTriggerReq),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stop Vulnerability Scan on agent or registry
     * Stop Vulnerability Scan
     */
    async stopVulnerabilityScan(requestParameters: StopVulnerabilityScanRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopVulnerabilityScanRaw(requestParameters, initOverrides);
    }

}
