import { cloneDeepWith } from 'lodash-es';
import { useEffect, useState } from 'react';
import {
  ActionFunctionArgs,
  Form,
  generatePath,
  redirect,
  useActionData,
} from 'react-router-dom';
import { Button, Checkbox, Switch, Typography } from 'ui-components';

import { vulnerabilityScanApiClient } from '@/api/api';
import { ApiDocsBadRequestResponse } from '@/api/generated';
import { ModelScanTriggerNodeTypeEnum } from '@/api/generated/models/ModelScanTrigger';
import { ConnectorHeader } from '@/features/onboard/components/ConnectorHeader';
import { ApiError, makeRequest } from '@/utils/api';
import { usePageNavigation } from '@/utils/usePageNavigation';

export type ScanActionReturnType = {
  message?: string;
};

const action = async ({
  params = {
    nodeIds: '',
    nodeType: '',
    scanType: '',
  },
  request,
}: ActionFunctionArgs): Promise<ScanActionReturnType> => {
  const { nodeIds = '', nodeType = '' } = params;

  const nodeIdArray = nodeIds?.split(',');
  const formData = await request.formData();
  const body = Object.fromEntries(formData);

  const r = await makeRequest({
    apiFunction: vulnerabilityScanApiClient().startVulnerabilityScan,
    apiArgs: [
      {
        modelVulnerabilityScanTriggerReq: {
          generate_bulk_scan_id: true,
          scan_triggers: nodeIdArray.map((nodeId) => ({
            node_id: nodeId,
            node_type: nodeType as ModelScanTriggerNodeTypeEnum,
          })),
          scan_config: 'all',
        },
      },
    ],
    errorHandler: async (r) => {
      const error = new ApiError<ScanActionReturnType>({});
      if (r.status === 400 || r.status === 409) {
        const modelResponse: ApiDocsBadRequestResponse = await r.json();
        return error.set({
          message: modelResponse.message ?? '',
        });
      }
    },
  });

  if (ApiError.isApiError(r)) {
    return r.value();
  }

  throw redirect(
    generatePath(
      '/onboard/scan/view-summary/running/:nodeIds/:nodeType/:scanType/:bulkScanId',
      {
        nodeIds,
        nodeType,
        scanType: 'vulnerability',
        bulkScanId: r.bulk_scan_id,
      },
    ),
    302,
  );
};

const packages = [
  {
    name: 'OS Packages',
    checked: false,
  },
  {
    name: 'Java',
    checked: false,
  },
  {
    name: 'Javascript',
    checked: false,
  },
  {
    name: 'Rust',
    checked: false,
  },
  {
    name: 'GoLang',
    checked: false,
  },
  {
    name: 'Ruby',
    checked: false,
  },
  {
    name: 'Python',
    checked: false,
  },
  {
    name: 'PHP',
    checked: false,
  },
  {
    name: 'Dotnet',
    checked: false,
  },
];

const VulnerabilityScanConfigure = () => {
  const actionData = useActionData() as ScanActionReturnType;
  const { goBack } = usePageNavigation();
  const [isSelectAll, setIsSelectAll] = useState(false);
  const [pkgs, setSelectPackages] = useState(packages);
  const [advanceOption, setAdvanceOption] = useState<{
    entireCluster: boolean;
    priorityScan: boolean;
  }>({
    entireCluster: false,
    priorityScan: false,
  });

  useEffect(() => {
    if (isSelectAll) {
      const newPkgs = pkgs.map((pkg) => {
        pkg.checked = true;
        return pkg;
      });
      setSelectPackages(newPkgs);
    }
  }, [isSelectAll]);

  // select all switch
  const onSwitchChange = (checked: boolean) => {
    setIsSelectAll(checked);
    if (!checked) {
      const newPkgs = pkgs.map((pkg) => {
        pkg.checked = false;
        return pkg;
      });
      setSelectPackages(newPkgs);
    }
  };

  // packages checkbox
  const onPackageCheckedChange = (
    pkg: {
      name: string;
      checked: boolean;
    },
    checked: boolean,
  ) => {
    if (checked === false) {
      setIsSelectAll(false);
    } else if (pkgs.filter((pkg) => pkg.checked === true).length === pkgs.length - 1) {
      setIsSelectAll(true);
    }
    setSelectPackages((state) => {
      const _newState = cloneDeepWith(state, (value) => {
        if (value.name === pkg.name) {
          return {
            ...value,
            checked,
          };
        }
        return undefined;
      });

      return _newState;
    });
  };

  const onAdvancedOptionChange = (name: string, value: boolean) => {
    setAdvanceOption((state) => {
      return {
        ...state,
        [name]: value,
      };
    });
  };

  return (
    <Form method="post">
      <ConnectorHeader
        title="Configure Vulnerability Scan"
        description="Choose from the below options to perform your first scan."
      />

      {
        <section className="mb-4">
          <p className={`text-sm text-red-500`}>{actionData?.message}</p>
        </section>
      }

      <section>
        <div className="flex">
          <h6
            className={`${Typography.size.lg} ${Typography.weight.medium} mt-0 dark:text-white`}
          >
            Packages
          </h6>
          <Button size="sm" color="primary" className="ml-auto" type="submit">
            Start Scan
          </Button>
        </div>
        <div className="mt-4">
          <Switch
            label="Select All"
            size="sm"
            onCheckedChange={onSwitchChange}
            checked={isSelectAll}
          />
        </div>

        <div className="flex flex-row mt-4 gap-5">
          {pkgs.map((pkg) => {
            return (
              <Checkbox
                label={pkg.name}
                key={pkg.name}
                name={pkg.name}
                checked={isSelectAll ? true : pkg.checked}
                onCheckedChange={(checked: boolean) => {
                  onPackageCheckedChange(pkg, checked);
                }}
              />
            );
          })}
        </div>
      </section>

      <section className="mt-8">
        <h6
          className={`${Typography.size.lg} ${Typography.weight.medium} mt-4 dark:text-white`}
        >
          Advanced Options
        </h6>

        <div className="flex flex-col mt-4 gap-4">
          <Checkbox
            label={
              'Scan Entire Cluster (All hosts and container images of all pods in the cluster)'
            }
            name="entireCluster"
            onCheckedChange={(checked: boolean) => {
              onAdvancedOptionChange('entireCluster', checked);
            }}
            checked={advanceOption.entireCluster}
          />
          <Checkbox
            label={'Priority Scan'}
            name="priorityScan"
            onCheckedChange={(checked: boolean) => {
              onAdvancedOptionChange('priorityScan', checked);
            }}
            checked={advanceOption.priorityScan}
          />
        </div>
      </section>
      <Button onClick={goBack} color="default" size="xs" className="mt-16">
        Go Back
      </Button>
    </Form>
  );
};

export const module = {
  action,
  element: <VulnerabilityScanConfigure />,
};
